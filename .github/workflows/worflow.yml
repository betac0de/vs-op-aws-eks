name: 'Terraform CI/CD for EKS'

# Controls when the workflow will run
on:
  # Trigger on push to main (for apply)
  push:
    branches:
      - develop
    paths:
      - 'aws_eks/**'
      - '.github/workflows/**'
      - 'artifact/**'

  # Trigger on pull request to main (for plan)
  pull_request:
    branches:
      - develop
    paths:
      - 'aws_eks/**'
      - '.github/workflows/**'
      - 'artifact/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure. Any other value will be ignored.'
        required: true
        default: 'false'
        type: string

  # New: Schedule for automatic cleanup check
  schedule:
    # Runs every 15 minutes. You can adjust the cron expression as needed.
    # Note: Scheduled workflows can be delayed by a few minutes.
    - cron: '*/15 * * * *'

# Permissions needed for OIDC authentication and posting PR comments
permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  # This job runs only on Pull Requests to generate a plan
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        # ADD AN ID TO THIS STEP
        id: setup_terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install Rover from tarball
        run: |
          unzip rover_0.3.3_linux_amd64.zip
          chmod +x rover_v0.3.3
        working-directory: ./artifacts

      - name: Verify Rover installation
        run: |
          ${GITHUB_WORKSPACE}/artifacts/rover_v0.3.3 --version

      - name: Terraform Init
        id: init
        # Use the terraform_executable path from the setup step
        run: terraform init

      - name: Terraform Plan
        id: plan
        # Use the terraform_executable path from the setup step
        run: terraform plan -no-color -input=false -out=tfplan

      # New Step: Generate Rover image from the plan file
      - name: Generate Rover Image
        id: rover_image
        # CORRECTED STEP: Find terraform path manually and pass it to rover
        run: |
          TERRAFORM_EXEC_PATH=$(which terraform)
          echo "Found Terraform executable at: $TERRAFORM_EXEC_PATH"
          ${GITHUB_WORKSPACE}/artifacts/rover_v0.3.3 -planPath tfplan -genImage -tfPath "$TERRAFORM_EXEC_PATH"

      # The rest of your steps for uploading the artifact and commenting on the PR remain the same...
      - name: Upload Rover Plan Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rover-plan-image
          # Rover creates a 'rover.png' by default when using -genImage
          path: ./aws_eks/rover.png
          retention-days: 7

      - name: Create Plan Text Output
        id: plan-output
        run: |
          PLAN_CONTENT=$(terraform show -no-color tfplan)
          echo "plan_text<<EOF" >> $GITHUB_ENV
          echo "$PLAN_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # This step correctly links to the artifact, no changes needed from last time
      - name: Update PR with Plan and Artifact Link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const output = `#### Terraform Plan & Visualization üñºÔ∏è
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*

            The Rover visualization has been generated. You can **[view and download the plan image here](${artifactUrl})** by clicking on the "rover-plan-image" artifact at the bottom of the workflow summary page.

            <details><summary>Show Plan Text</summary>

            \`\`\`terraform
            ${{ env.plan_text }}
            \`\`\`
            </details>
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })