name: 'Terraform CI/CD for EKS'

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches:
      - main
    paths:
      - 'aws_eks/**' # Only run if files in the terraform directory change

  # Triggers the workflow on pull request events for the "main" branch
  pull_request:
    branches:
      - main
    paths:
      - 'aws_eks/**'

# Permissions needed for OIDC authentication and posting PR comments
permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  # This job runs only on Pull Requests to generate a plan
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    # Use the Bash shell regardless of the runner's default
    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks # Set the working directory for all steps

    steps:
      # 1. Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # Assumes you have this secret configured
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      # 3. Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 4. Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # 5. Generate a Terraform plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan

      # 6. Create a user-friendly plan output to post in the PR
      - name: Create Plan Output
        id: plan-output
        run: |
          PLAN_CONTENT=$(terraform show -no-color tfplan)
          echo "plan_text<<EOF" >> $GITHUB_ENV
          echo "$PLAN_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 7. Post the plan as a comment on the Pull Request
      - name: Update PR with Plan
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ env.plan_text }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # This job runs only on a push to the main branch to apply the changes
  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks # Set the working directory for all steps

    steps:
      # 1. Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      # 3. Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 4. Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # 5. Apply the Terraform plan
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false