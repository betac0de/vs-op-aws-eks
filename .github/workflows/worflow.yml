name: 'Terraform CI/CD for EKS'

# Controls when the workflow will run
on:
  # Trigger on push to main (for apply)
  push:
    branches:
      - main
    paths:
      - 'aws_eks/**'
      - '.github/workflows/**'

  # Trigger on pull request to main (for plan)
  pull_request:
    branches:
      - main
    paths:
      - 'aws_eks/**'
      - '.github/workflows/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure. Any other value will be ignored.'
        required: true
        default: 'false'
        type: string

# Permissions needed for OIDC authentication and posting PR comments
permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  # This job runs only on Pull Requests to generate a plan
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks # Set the working directory for all steps

    steps:
      # ... (plan steps remain the same) ...
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
      - name: Create Plan Output
        id: plan-output
        run: |
          PLAN_CONTENT=$(terraform show -no-color tfplan)
          echo "plan_text<<EOF" >> $GITHUB_ENV
          echo "$PLAN_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Update PR with Plan
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–
            <details><summary>Show Plan</summary>
            \`\`\`terraform
            ${{ env.plan_text }}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # This job runs only on a push to the main branch to apply the changes
  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks # Set the working directory for all steps

    steps:
      # ... (apply steps remain the same) ...
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

  # This job runs ONLY when manually triggered with the correct input
  terraform_destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    # This condition ensures the job only runs when manually dispatched with destroy=true
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks # Set the working directory for all steps

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform init
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false