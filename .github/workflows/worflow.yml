name: 'Terraform CI/CD for EKS'

# Controls when the workflow will run
on:
  # Trigger on push to main (for apply)
  push:
    branches:
      - main
    paths:
      - 'aws_eks/**'
      - '.github/workflows/**'
      - 'artifact/**'

  # Trigger on pull request to main (for plan)
  pull_request:
    branches:
      - main
    paths:
      - 'aws_eks/**'
      - '.github/workflows/**'
      - 'artifact/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure. Any other value will be ignored.'
        required: true
        default: 'false'
        type: string

  # New: Schedule for automatic cleanup check
  schedule:
    # Runs every 15 minutes. You can adjust the cron expression as needed.
    # Note: Scheduled workflows can be delayed by a few minutes.
    - cron: '*/15 * * * *'

# Permissions needed for OIDC authentication and posting PR comments
permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  # This job runs only on Pull Requests to generate a plan
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        # ADD AN ID TO THIS STEP
        id: setup_terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install Rover from tarball
        run: |
          unzip rover_0.3.3_linux_amd64.zip
          chmod +x rover_v0.3.3
        working-directory: ./artifacts

      - name: Verify Rover installation
        run: |
          ${GITHUB_WORKSPACE}/artifacts/rover_v0.3.3 --version

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Generate Rover HTML Report
        run: |
          TERRAFORM_EXEC_PATH=$(which terraform)
          echo "Found Terraform executable at: $TERRAFORM_EXEC_PATH"
          ${GITHUB_WORKSPACE}/artifacts/rover_v0.3.3 -planPath tfplan -standalone -tfPath "$TERRAFORM_EXEC_PATH"

      - name: Upload Rover Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rover-plan-report
          path: ./aws_eks/rover.zip
          retention-days: 7

      - name: Create Plan Text Output
        run: |
          PLAN_CONTENT=$(terraform show -no-color tfplan)
          echo "plan_text<<EOF" >> $GITHUB_ENV
          echo "$PLAN_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update PR with Plan and Interactive Report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const output = `#### Terraform Plan & Visualization üñºÔ∏è
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            
            An interactive plan visualization has been generated. You can **[view the Rover HTML report here](${artifactUrl})** by clicking on the "rover-plan-report" artifact at the bottom of the workflow summary page. (Note: you will need to download and unzip the 'rover.zip' file to view the report).
            
            <details><summary>Show Plan Text</summary>
            
            \`\`\`terraform
            ${{ env.plan_text }}
            \`\`\`
            </details>
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
  cleanup_check:
    name: 'Cleanup Check'
    runs-on: ubuntu-latest
    # This job only runs when triggered by the schedule
    if: github.event_name == 'schedule'
    permissions:
      # Required to dispatch another workflow (terraform_destroy)
      actions: write
      # Required to read repository information (workflow runs)
      contents: read

    steps:
      - name: Get last successful apply run and trigger destroy if inactive
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflowName = 'Terraform CI/CD for EKS';
            const branch = 'main';
            const event = 'push';
            const status = 'success';
            const inactivityThresholdMinutes = 15;
            // IMPORTANT: This must match your actual workflow filename.
            const workflowFileName = 'worflow.yml';

            // Find the last successful 'apply' run
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              workflow_id: workflowName,
              branch,
              event,
              status,
              per_page: 1
            });

            if (runs.workflow_runs.length === 0) {
              console.log('No successful apply runs found on main branch. No destroy triggered.');
              return;
            }

            const lastRunTime = new Date(runs.workflow_runs[0].updated_at);
            const currentTime = new Date();
            const diffMinutes = (currentTime - lastRunTime) / (1000 * 60);

            console.log(`Last successful apply was ${diffMinutes.toFixed(2)} minutes ago.`);

            if (diffMinutes >= inactivityThresholdMinutes) {
              console.log(`Inactivity threshold of ${inactivityThresholdMinutes} minutes met. Triggering destroy.`);
              // Trigger the destroy job by dispatching this same workflow
              await github.rest.actions.createWorkflowDispatch({
                owner,
                repo,
                workflow_id: workflowFileName,
                ref: branch,
                inputs: {
                  destroy: 'true'
                }
              });
              console.log('Destroy workflow dispatched successfully.');
            } else {
              console.log('Environment is active. No destroy needed.');
            }

  # This job runs ONLY when manually triggered with the correct input
  terraform_destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    # This condition ensures the job only runs when manually dispatched with destroy=true
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    defaults:
      run:
        shell: bash
        working-directory: ./aws_eks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform init
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false